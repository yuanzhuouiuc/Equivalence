File url: https://github.com/ssrg-vt/C2SRust/blob/main/C2Rust_Benchmarks/Adjusted_Internal_Benchmarks/bubble_sort/output.txt

----------------Input C Program----------------
/**
 * @file
 * @brief [Bubble sort](https://en.wikipedia.org/wiki/Bubble_sort) algorithm
 * implementation
 */
#include <assert.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/**
 * Swap two values by using pointer
 * @param first first pointer of first number
 * @param second second pointer of second number
 */
void swap(int *first, int *second)
{
    int temp = *first;
    *first = *second;
    *second = temp;
}

/**
 * Bubble sort algorithm implementation
 * @param arr array to be sorted
 * @param size size of array
 */
void bubbleSort(int *arr, int size)
{
    for (int i = 0; i < size - 1; i++)
    {                         /* for each array index */
        /* perform iterations until no more changes were made or outer loop
            executed for all array indices */
        for (int j = 0; j < size - 1 - i; j++)
        { /* for each element in the array */
            if (arr[j] > arr[j + 1])
            { /* if the order of successive elements needs update */
                swap(&arr[j], &arr[j + 1]);
            }
        }
    }
}

int n = 97;

// Read integers from command-line arguments and create an array
int *create_array_from_args(int argc, const char *argv[], int *size) {
    *size = argc - 1;  // Number of integers provided as arguments

    // Allocate memory for the integers
    int *arr = (int *)malloc(*size * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed!\n");
        return NULL;
    }

    // Parse the command-line arguments and store them in the array
    for (int i = 0; i < *size; i++) {
        arr[i] = atoi(argv[i + 1]);  // Convert argument to integer
    }

    return arr;
}

// Validating the number of arguments
void validate_arg_count(int argc, int expected_argc) {
    if (argc - 1 != expected_argc) {
        printf("Error: Expected %d arguments, but got %d.\n", expected_argc, argc - 1);
        exit(1);  // Exit the program with an error code
        //abort();
    }
}

/** Driver Code */
int main(int argc, const char *argv[]) {
    
    // Call the validation function to check the argument count
    validate_arg_count(argc, n);
        
    int *numbers = create_array_from_args(argc, argv, &n);

/*    numbers = malloc(n * sizeof(*numbers));
    int read_count = 0;  // Counter to track successful scanf calls
    for (int i=0; i<n; i++) {
        if (scanf("%d", &numbers[i]) == 1) {
            read_count++;
        } else {
            printf("Error reading input at position %d\n", i);
            break;
        }
    }
*/    

    int size = 1000000;
    //int size = 10;

    for (int i = 0; i < size; i++) {

        bubbleSort(numbers, n);

    }
    
    
    // Loop through the array and print each element
    for (int i = 0; i < n; i++) {
        printf("%d ", numbers[i]);
    }
    
    // Print a new line after the array elements
    printf("\n");
    
}

----------------Unsafe Rust Program----------------
pub fn swap(first: &mut i32, second: &mut i32) {
    let temp = *first;
    *first = *second;
    *second = temp;
}

pub fn bubble_sort(arr: &mut Vec<i32>, size: usize) {
    for i in 0..size - 1 {
        for j in 0..size - 1 - i {
            if arr[j] > arr[j + 1] {
                swap(&mut arr[j], &mut arr[j + 1]);
            }
        }
    }
}

let n = 97;

pub fn create_array_from_args(args: Vec<String>, size: &mut usize) -> Vec<i32> {
    *size = args.len() - 1;
    let mut arr: Vec<i32> = vec![0; *size];
    for i in 0..*size {
        arr[i] = args.get(i+1)
                     .expect("No argument found for this index.")
                     .parse()
                     .expect("Failed to parse argument to integer.");
    }
    arr
}

pub fn validate_arg_count(args: Vec<String>, expected_argc: usize) {
    let argc = args.len() - 1;
    if argc != expected_argc {
        panic!("Error: Expected {} arguments, but got {}.", expected_argc, argc);
    }
}

fn main() {
    let args: Vec<String> = std::env::args().collect();
    validate_arg_count(args.clone(), n);
    
    let mut numbers: Vec<i32> = create_array_from_args(args.clone(), &mut n);
    
    let size = 1000000;
    
    for _ in 0..size {
        bubble_sort(&mut numbers, n);
    }
    
    for i in 0..n {
        print!("{} ", numbers[i]);
    }
    println!("");
}
Cargo.toml Path:/var/folders/rq/dlz9_c0n2ml56w_bzms9kjy00000gn/T/iotaq_rust_9076153825512741477/rust_proj/Cargo.toml
[package]
name = "rust_proj"
version = "0.1.0"
edition = "2021"

[dependencies]


----------------Safe Rust Program----------------
pub fn swap(arr: &mut [i32], i: usize, j: usize) {
    let temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

pub fn bubble_sort(arr: &mut [i32]) {
    let size = arr.len();
    for i in 0..size {
        for j in 0..size - 1 - i {
            if arr[j] > arr[j + 1] {
                swap(arr, j, j + 1);
            }
        }
    }
}

static N: usize = 97;

pub fn create_array_from_args(args: Vec<String>) -> Result<Vec<i32>, &'static str> {
    if args.len() != N + 1 {
        return Err("Error: Expected 97 arguments, but got fewer.");
    }
    let mut arr: Vec<i32> = vec![0; N];
    for i in 0..N {
        arr[i] = args.get(i+1)
                    .ok_or("No argument found for this index.")?
                    .parse::<i32>()
                    .or(Err("Failed to parse argument to integer."))?;
    }
    Ok(arr)
}

fn main() {
    let args: Vec<String> = std::env::args().collect();

    if args.len() != N + 1 {
        eprintln!("Error: Expected 97 arguments, but got {}.", args.len()-1);
        return;
    }

    let mut numbers = match create_array_from_args(args) {
        Ok(numbers) => numbers,
        Err(err) => {
            eprintln!("{}", err);
            return;
        },
    };

    let size = 1000000;
    for _ in 0..size {
        bubble_sort(&mut numbers);
    }

    for i in 0..N {
        print!("{} ", numbers[i]);
    }

    println!("");
}