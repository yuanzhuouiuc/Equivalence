File url: https://github.com/ssrg-vt/C2SRust/blob/main/C2Rust_Benchmarks/Adjusted_Internal_Benchmarks/selection_sort/output.txt
----------------Input C Program----------------
/**
 * @file
 * @brief [Selection sort](https://en.wikipedia.org/wiki/Selection_sort)
 * algorithm implementation.
 */
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/**
 * Swapped two numbers using pointer
 * @param first first pointer of first number
 * @param second second pointer of second number
 */
void swap(int *first, int *second)
{
    int temp = *first;
    *first = *second;
    *second = temp;
}

/**
 * Selection sort algorithm implements
 * @param arr array to be sorted
 * @param size size of array
 */
void selectionSort(int arr[], int size)
{
    for (int i = 0; i < size - 1; i++)
    {
        int min_index = i;
        for (int j = i + 1; j < size; j++)
        {
            if (arr[min_index] > arr[j])
            {
                min_index = j;
            }
        }
        if (min_index != i)
        {
            swap(arr + i, arr + min_index);
        }
    }
}

int n = 97;

// Read integers from command-line arguments and create an array
int *create_array_from_args(int argc, const char *argv[], int *size) {
    *size = argc - 1;  // Number of integers provided as arguments

    // Allocate memory for the integers
    int *arr = (int *)malloc(*size * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed!\n");
        return NULL;
    }

    // Parse the command-line arguments and store them in the array
    for (int i = 0; i < *size; i++) {
        arr[i] = atoi(argv[i + 1]);  // Convert argument to integer
    }

    return arr;
}

// Validating the number of arguments
void validate_arg_count(int argc, int expected_argc) {
    if (argc - 1 != expected_argc) {
        printf("Error: Expected %d arguments, but got %d.\n", expected_argc, argc - 1);
        exit(1);  // Exit the program with an error code
        //abort();
    }
}

/** Driver Code */
int main(int argc, const char *argv[]) {
    
    // Call the validation function to check the argument count
    validate_arg_count(argc, n);
        
    int *numbers = create_array_from_args(argc, argv, &n);
    
    int size = 1000000;

    for (int i = 0; i < size; i++) {

        selectionSort(numbers, n);

    }
    // Loop through the array and print each element
    for (int i = 0; i < n; i++) {
        printf("%d ", numbers[i]);
    }
    
    // Print a new line after the array elements
    printf("\n");

    return 0;
}


----------------Unsafe Rust Program----------------
use std::env;
use std::process;

pub fn swap(first: &mut i32, second: &mut i32) {
    let temp = *first;
    *first = *second;
    *second = temp;
}

pub fn selection_sort(arr: &mut [i32], size: usize) {
    for i in 0..size - 1 {
        let mut min_index = i;
        for j in i + 1..size {
            if arr[min_index] > arr[j] {
                min_index = j;
            }
        }
        if min_index != i {
            swap(&mut arr[i], &mut arr[min_index]);
        }
    }
}

pub fn validate_arg_count(argc: usize, expected_argc: i32) {
    if (argc - 1) as i32 != expected_argc {
        eprintln!("Error: Expected {} arguments, but got {}.", expected_argc, argc - 1);
        process::exit(1);
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let argc = args.len();
    let mut n = 97;

    validate_arg_count(argc, n);

    let mut numbers: Vec<i32> = Vec::new();
    for i in 1..argc {
        numbers.push(args[i].parse().unwrap());
    }

    let size = 1000000;

    for _i in 0..size {
        selection_sort(&mut numbers[..], n as usize);
    }

    for i in 0..n {
        print!("{} ", numbers[i as usize]);
    }

    println!();
}
Cargo.toml Path:/var/folders/rq/dlz9_c0n2ml56w_bzms9kjy00000gn/T/iotaq_rust_4089675669115881872/rust_proj/Cargo.toml
[package]
name = "rust_proj"
version = "0.1.0"
edition = "2021"

[dependencies]


----------------Safe Rust Program----------------
use std::env;
use std::process;

pub fn swap(arr: &mut [i32], a: usize, b: usize) {
    let temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
}

pub fn selection_sort(arr: &mut [i32], size: usize) {
    for i in 0..size - 1 {
        let mut min_index = i;
        for j in i + 1..size {
            if arr[j] < arr[min_index] {
                min_index = j;
            } 
        }
        if min_index != i {
            swap(arr, i, min_index);
        }
    } 
}

pub fn validate_arg_count(argc: usize, expected_argc: i32) {
    if (argc - 1) as i32 != expected_argc {
        eprintln!("Error: Expected {} arguments, but got {}.", expected_argc, argc - 1);
        process::exit(1);
    } 
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let argc = args.len();
    let n = 97;

    validate_arg_count(argc, n);

    let mut numbers: Vec<i32> = Vec::new();
    for i in 1..argc {
        numbers.push(args[i].parse().unwrap());
    } 

    let size = 1;

    for _i in 0..size {
        selection_sort(&mut numbers[..], n as usize);
    } 

    for i in 0..n {
        print!("{} ", numbers[i as usize]);
    } 

    println!();
}