File url: https://github.com/ssrg-vt/C2SRust/blob/main/C2Rust_Benchmarks/Adjusted_Internal_Benchmarks/comb_sort/output.txt

----------------Input C Program----------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h> 
// #define SHRINK 2  // suggested shrink factor value

void sort(int numbers[], int size)
{
    int gap = size;
    float SHRINK = 2.0;
    while (gap > 1)  // gap = 1 means that the array is sorted
    {
        gap = gap / SHRINK;
        int i = 0;
        while ((i + gap) < size)
        {  // similiar to the Shell Sort
            if (numbers[i] > numbers[i + gap])
            {
                int tmp = numbers[i];
                numbers[i] = numbers[i + gap];
                numbers[i + gap] = tmp;
            }
            i++;
        }
    }
}

int n = 97;

// Read integers from command-line arguments and create an array
int *create_array_from_args(int argc, const char *argv[], int *size) {
    *size = argc - 1;  // Number of integers provided as arguments

    // Allocate memory for the integers
    int *arr = (int *)malloc(*size * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed!\n");
        return NULL;
    }

    // Parse the command-line arguments and store them in the array
    for (int i = 0; i < *size; i++) {
        arr[i] = atoi(argv[i + 1]);  // Convert argument to integer
    }

    return arr;
}

// Validating the number of arguments
void validate_arg_count(int argc, int expected_argc) {
    if (argc - 1 != expected_argc) {
        printf("Error: Expected %d arguments, but got %d.\n", expected_argc, argc - 1);
        exit(1);  // Exit the program with an error code
        //abort();
    }
}

/** Driver Code */
int main(int argc, const char *argv[]) {
    
    // Call the validation function to check the argument count
    validate_arg_count(argc, n);
        
    int *numbers = create_array_from_args(argc, argv, &n);
    
	int size = 10000000;

    for (int i = 0; i < size; i++) {

        sort(numbers, n);

    }
    
    // Loop through the array and print each element
    for (int i = 0; i < n; i++) {
        printf("%d ", numbers[i]);
    }
    
    // Print a new line after the array elements
    printf("\n");

    return 0;

}


----------------Unsafe Rust Program----------------
mod libc {
    pub use ::libc::*;
}

pub fn sort(numbers: &mut [i32]) {
    let size = numbers.len();
    let mut gap = size;
    let shrink = 2.0;
    
    while gap > 1 {
        gap = (gap as f32 / shrink) as usize;
        let mut i = 0;
        while (i + gap) < size {
            if numbers[i] > numbers[i + gap] {
                let tmp = numbers[i];
                numbers[i] = numbers[i + gap];
                numbers[i + gap] = tmp;
            }
            i += 1;
        }
    }
}

static N: i32 = 97;

pub fn create_array_from_args(args: &[Vec<u8>], size: &mut usize) -> Vec<i32> {
    *size = args.len();
    let mut arr = vec![0; *size];
    
    for (i, arg) in args.iter().enumerate() {
        arr[i] = String::from_utf8_lossy(arg).trim().parse::<i32>().unwrap_or(0);
    }
    
    arr
}

pub fn validate_arg_count(given_argc: &usize, expected_argc: i32) {
    if (*given_argc as i32 - 1) != expected_argc {
        println!("Error: Expected {} arguments, but got {}.", expected_argc, given_argc - 1);
        std::process::exit(1);
    }
}

fn main() {
    let args: Vec<Vec<u8>> = std::env::args_os().map(|x| x.into_vec()).collect();
    
    validate_arg_count(&args.len(), N);
    
    let mut n = N as usize;
    let mut numbers = create_array_from_args(&args[1..], &mut n);
    
    let size = 10000000;
    
    for _ in 0..size {
        sort(&mut numbers[0..n]);
    }
    
    for num in &numbers[0..n] {
        print!("{} ", num);
    }
    
    println!();
}

Cargo.toml Path:/var/folders/rq/dlz9_c0n2ml56w_bzms9kjy00000gn/T/iotaq_rust_3944492851423953993/rust_proj/Cargo.toml
[package]
name = "rust_proj"
version = "0.1.0"
edition = "2021"

[dependencies]


----------------Safe Rust Program----------------
mod libc {}

pub fn sort(numbers: &mut [i32]) {
    let size = numbers.len();
    let mut gap = size;
    let shrink = 2.0;

    while gap > 1 {
        gap = (gap as f32 / shrink) as usize;
        let mut i = 0;
        while (i + gap) < size {
            if numbers[i] > numbers[i + gap] {
                numbers.swap(i, i + gap);
            }
            i += 1;
        }
    }
}

static N: i32 = 97;

pub fn create_array_from_args(args: &[Vec<u8>], size: &mut usize) -> Vec<i32> {
    *size = args.len();
    let mut arr = vec![0; *size];

    for (i, arg) in args.iter().enumerate() {
        arr[i] = String::from_utf8_lossy(arg).trim().parse::<i32>().unwrap_or(0);
    }

    arr
}

pub fn validate_arg_count(given_argc: &usize, expected_argc: i32) {
    if (*given_argc as i32 - 1) != expected_argc {
        println!("Error: Expected {} arguments, but got {}.", expected_argc, (*given_argc as i32) - 1);
        std::process::exit(1);
    }
}

fn main() {
    let args: Vec<Vec<u8>> = std::env::args_os().map(|x| x.into_string().unwrap_or_default().into_bytes()).collect();

    validate_arg_count(&args.len(), N);

    let mut n = N as usize;
    let mut numbers = create_array_from_args(&args[1..], &mut n);

    let size = 10000000;

    for _ in 0..size {
        sort(&mut numbers[0..n]);
    }

    for num in &numbers[0..n] {
        print!("{} ", num);
    }

    println!();
}
